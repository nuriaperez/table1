% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_table1.R
\name{buildTable1List}
\alias{buildTable1List}
\title{Build Table 1}
\usage{
buildTable1List(theData, theVariables, groupBy, percentFirst = TRUE,
  conductGroupTests = TRUE, meanDigits = getOption("digits"),
  sdDigits = getOption("digits"), freqDigits = getOption("digits"),
  statDigits = getOption("digits"), pDigits = getOption("digits"))
}
\arguments{
\item{theData}{The data.frame containing the data for the variable.}

\item{theVariables}{A vector of variables that are being reported in the table (a character vector).}

\item{groupBy}{A variable (factor) used to stratify the variable being reported (see details below).}

\item{percentFirst}{A boolean, if TRUE numeric variables are printed as x\%(n) otherwise as n(x\%).}

\item{conductGroupTests}{A boolean, if TRUE group comparisons are conducted (see details below).}

\item{meanDigits}{An integer indicating number of digits printed following the decimal place (this is not precision as in round, you get the number of digits you ask for, even if they are zero).}

\item{sdDigits}{An integer indicating number of digits printed following the decimal place for standard deviations (this is not precision as in round, you get the number of digits you ask for, even if they are zero).}

\item{freqDigits}{An integer indicating number of digits printed following the decimal place for percentages (this is not precision as in round, you get the number of digits you ask for, even if they are zero).}

\item{statDigits}{An integer indicating number of digits printed following the decimal place for test statistics (this is not precision as in round, you get the number of digits you ask for, even if they are zero).}

\item{pDigits}{An integer indicating number of digits printed following the decimal place for test P-Values (if numer of zeros in P is greater than pDigits the value will be "< 000...1").}

\item{meanDigits}{An integer indicating number of digits printed following the decimal place for means (this is not precision as in round, you get the number of digits you ask for, even if they are zero)}
}
\value{
A list of data.frames one for each variable. All columns in the respective data frames are character vectors. For
numeric variables, the column will contain the mean and standard deviation in the form described above. For factor variables
multiple rows are generated where columns will contain frequencies reported in percentages and counts "n" in the form described above.


If groupBy is specified then statistical tests are conducted to compare groups. For numeric variables ANOVA is used to compare
group means, factors are evaluated by \eqn{chi}-squared test of independence.

\itemize{
  \item \bold{Demographic}:  1st column for numeric variables value is the name of the variable.
  \item \bold{Value}: the mean and standard deviation of theVariable ordered as described above.
  \item \bold{Group}: if groupBy is used then there will be a column for each level of the factor with frequencies and counts.
  \item \bold{Stat}: if groupBy is used AND conductGroupTests == TRUE this value contains either the F statistic "FStat" for numeric.
  variables or the chi-square "Chisq" statistic for categorical variables.
  \item \bold{PValue}: if groupBy is used AND conductGroupTests == TRUE this value contains the p value returned by the respective test.
  Note, pDigits determines how many digits follow the decimal place. If p is small enough that this string would be all zeros,
  the string is modified to be "< 0.000..1" where number of zeros to the right of the decimal is pDigits-1.

}
}
\description{
Creates Table-1 for demographics in a study. Uses buildTable1Rows to build a list of data.frames constituting table 1.
When these tables are rendered to MS-Word by knitr, they are automatically joined together by proximity and require
minor editing.
}
\examples{
table1Tables <- buildTable1List(theData = theDataFrame, theVariables = c("age", "sex", "Race1", "Ethnicity", "Rank"), groupBy="site", percentFirst = TRUE, meanDigits = 1, sdDigits = 1, freqDigits = 2, statDigits = 2, pDigits = 5)
lapply(table1Tables, print)

}

